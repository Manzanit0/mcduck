version: "3"

env:
  SMEE_URL: https://smee.io/Yh2XnVMscjUHetc3

tasks:
  tools:
    desc: install tools
    cmds:
      - go install github.com/bufbuild/buf/cmd/buf@latest
      # These are required to generate connect clients in Go. For JS clients,
      # we're using buf remote modules.
      - go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - go install connectrpc.com/connect/cmd/protoc-gen-connect-go@latest

  gen-proto:
    desc: generate protobuf outputs via Buf
    cmd: buf generate

  format-proto:
    desc: format protobuf files
    cmd: buf format --config api/buf.yaml -w

  test:
    desc: check code compiles and run unit tests
    cmds:
      - go build -race ./...
      - go test -cover -shuffle=on -race ./...
  smee:
    desc: sets up local webhook for Telegram bot
    cmd: smee -u "$SMEE_URL" -p 8081 -P /telegram/webhook

  up:
    desc: Runs the local docker-compose.yaml file while injecting some environment variables from the cloud environment, namely the PARSER connection details.
    silent: false
    vars:
      OPENAI_API_KEY:
        sh: railway variables -s parser --json | jq -r .OPENAI_API_KEY
    dotenv:
      - ".env" # This contains the TELEGRAM_BOT_TOKEN environment variable
    preconditions:
      - msg: Have you logged in to the railway CLI?
        sh: railway whoami
      - msg: Have you run "task smee" in a separate terminal?
        sh: pgrep -f "task smee"
      - msg: Telegram webhook isn't set to $SMEE_URL. Make sure to set it through the setWebhook API call.
        sh: test $(curl -s https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getWebhookInfo | jq -r .result.url) = "$SMEE_URL"
    cmds:
      - |
        OPENAI_API_KEY={{.OPENAI_API_KEY}} \
        docker compose up --watch

  up-web:
    desc: starts the deno app
    cmd: deno task --cwd spidey start

  pgcli:
    desc: Connects to the local Docker postgres database via "pgcli"
    cmds:
      - pgcli "postgresql://root:password@localhost:5431/mcduck_db"

  deploy:
    desc: Deploys the local workspace version of the code of all services to railway.app
    prompt: Are you sure you want to deploy to railway.app?
    cmds:
      - railway up -s mcduck --detach
      - railway up -s tgram-bot --detach
      - railway up -s parser --detach

  rw-pgcli:
    desc: Connects to the railway.app cloud postgres database via "pgcli"
    vars:
      DATABASE_URL:
        sh: railway variables -s mcduck --json | jq -r .DATABASE_URL
    cmds:
      - pgcli "{{.DATABASE_URL}}"

  rw-migrate:
    desc: Runs migrations in the railway.app cloud environment.
    prompt: Are you sure you want to run migrations in the cloud?
    silent: false
    vars:
      PGHOST:
        sh: railway variables -s mcduck --json | jq -r .PGHOST
      PGPORT:
        sh: railway variables -s mcduck --json | jq -r .PGPORT
      PGDATABASE:
        sh: railway variables -s mcduck --json | jq -r .PGDATABASE
      PGUSER:
        sh: railway variables -s mcduck --json | jq -r .PGUSER
      PGPASSWORD:
        sh: railway variables -s mcduck --json | jq -r .PGPASSWORD
    cmds:
      - |
        docker run --rm -v `pwd`/migrations:/flyway/sql flyway/flyway:7.14.0 \
            -url="jdbc:postgresql://{{.PGHOST}}:{{.PGPORT}}/{{.PGDATABASE}}" \
            -user="{{.PGUSER}}" \
            -password="{{.PGPASSWORD}}" \
            -schemas=public \
            -connectRetries=60 \
            migrate

  rw-repair:
    desc: Repairs migrations in the railway.app cloud environment.
    prompt: Are you sure you want to repair migrations in the cloud?
    silent: false
    vars:
      PGHOST:
        sh: railway variables -s mcduck --json | jq -r .PGHOST
      PGPORT:
        sh: railway variables -s mcduck --json | jq -r .PGPORT
      PGDATABASE:
        sh: railway variables -s mcduck --json | jq -r .PGDATABASE
      PGUSER:
        sh: railway variables -s mcduck --json | jq -r .PGUSER
      PGPASSWORD:
        sh: railway variables -s mcduck --json | jq -r .PGPASSWORD
    cmds:
      - |
        docker run --rm -v `pwd`/migrations:/flyway/sql flyway/flyway:7.14.0 \
            -url="jdbc:postgresql://{{.PGHOST}}:{{.PGPORT}}/{{.PGDATABASE}}" \
            -user="{{.PGUSER}}" \
            -password="{{.PGPASSWORD}}" \
            -schemas=public \
            -connectRetries=60 \
            repair
