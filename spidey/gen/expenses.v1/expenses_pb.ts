// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file expenses.v1/expenses.proto (package expenses.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message expenses.v1.CreateExpenseRequest
 */
export class CreateExpenseRequest extends Message<CreateExpenseRequest> {
  /**
   * @generated from field: uint64 amount = 1;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp date = 2;
   */
  date?: Timestamp;

  /**
   * @generated from field: optional uint64 receipt_id = 3;
   */
  receiptId?: bigint;

  constructor(data?: PartialMessage<CreateExpenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.CreateExpenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "date", kind: "message", T: Timestamp },
    { no: 3, name: "receipt_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateExpenseRequest {
    return new CreateExpenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateExpenseRequest {
    return new CreateExpenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateExpenseRequest {
    return new CreateExpenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateExpenseRequest | PlainMessage<CreateExpenseRequest> | undefined, b: CreateExpenseRequest | PlainMessage<CreateExpenseRequest> | undefined): boolean {
    return proto3.util.equals(CreateExpenseRequest, a, b);
  }
}

/**
 * @generated from message expenses.v1.CreateExpenseResponse
 */
export class CreateExpenseResponse extends Message<CreateExpenseResponse> {
  /**
   * @generated from field: expenses.v1.Expense expense = 1;
   */
  expense?: Expense;

  constructor(data?: PartialMessage<CreateExpenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.CreateExpenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expense", kind: "message", T: Expense },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateExpenseResponse {
    return new CreateExpenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateExpenseResponse {
    return new CreateExpenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateExpenseResponse {
    return new CreateExpenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateExpenseResponse | PlainMessage<CreateExpenseResponse> | undefined, b: CreateExpenseResponse | PlainMessage<CreateExpenseResponse> | undefined): boolean {
    return proto3.util.equals(CreateExpenseResponse, a, b);
  }
}

/**
 * @generated from message expenses.v1.UpdateExpenseRequest
 */
export class UpdateExpenseRequest extends Message<UpdateExpenseRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: optional uint64 receipt_id = 2;
   */
  receiptId?: bigint;

  /**
   * @generated from field: optional uint64 amount = 3;
   */
  amount?: bigint;

  /**
   * @generated from field: optional google.protobuf.Timestamp date = 4;
   */
  date?: Timestamp;

  /**
   * @generated from field: optional string category = 5;
   */
  category?: string;

  /**
   * @generated from field: optional string subcategory = 6;
   */
  subcategory?: string;

  /**
   * @generated from field: optional string description = 7;
   */
  description?: string;

  constructor(data?: PartialMessage<UpdateExpenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.UpdateExpenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "receipt_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "date", kind: "message", T: Timestamp, opt: true },
    { no: 5, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "subcategory", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateExpenseRequest {
    return new UpdateExpenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateExpenseRequest {
    return new UpdateExpenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateExpenseRequest {
    return new UpdateExpenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateExpenseRequest | PlainMessage<UpdateExpenseRequest> | undefined, b: UpdateExpenseRequest | PlainMessage<UpdateExpenseRequest> | undefined): boolean {
    return proto3.util.equals(UpdateExpenseRequest, a, b);
  }
}

/**
 * @generated from message expenses.v1.UpdateExpenseResponse
 */
export class UpdateExpenseResponse extends Message<UpdateExpenseResponse> {
  /**
   * @generated from field: expenses.v1.Expense expense = 1;
   */
  expense?: Expense;

  constructor(data?: PartialMessage<UpdateExpenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.UpdateExpenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expense", kind: "message", T: Expense },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateExpenseResponse {
    return new UpdateExpenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateExpenseResponse {
    return new UpdateExpenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateExpenseResponse {
    return new UpdateExpenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateExpenseResponse | PlainMessage<UpdateExpenseResponse> | undefined, b: UpdateExpenseResponse | PlainMessage<UpdateExpenseResponse> | undefined): boolean {
    return proto3.util.equals(UpdateExpenseResponse, a, b);
  }
}

/**
 * @generated from message expenses.v1.DeleteExpenseRequest
 */
export class DeleteExpenseRequest extends Message<DeleteExpenseRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteExpenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.DeleteExpenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExpenseRequest {
    return new DeleteExpenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExpenseRequest {
    return new DeleteExpenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExpenseRequest {
    return new DeleteExpenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExpenseRequest | PlainMessage<DeleteExpenseRequest> | undefined, b: DeleteExpenseRequest | PlainMessage<DeleteExpenseRequest> | undefined): boolean {
    return proto3.util.equals(DeleteExpenseRequest, a, b);
  }
}

/**
 * @generated from message expenses.v1.DeleteExpenseResponse
 */
export class DeleteExpenseResponse extends Message<DeleteExpenseResponse> {
  constructor(data?: PartialMessage<DeleteExpenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.DeleteExpenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExpenseResponse {
    return new DeleteExpenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExpenseResponse {
    return new DeleteExpenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExpenseResponse {
    return new DeleteExpenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExpenseResponse | PlainMessage<DeleteExpenseResponse> | undefined, b: DeleteExpenseResponse | PlainMessage<DeleteExpenseResponse> | undefined): boolean {
    return proto3.util.equals(DeleteExpenseResponse, a, b);
  }
}

/**
 * @generated from message expenses.v1.ListExpensesRequest
 */
export class ListExpensesRequest extends Message<ListExpensesRequest> {
  /**
   * @generated from field: optional string user_email = 1;
   */
  userEmail?: string;

  /**
   * @generated from field: optional string receipt_id = 2;
   */
  receiptId?: string;

  constructor(data?: PartialMessage<ListExpensesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.ListExpensesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "receipt_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExpensesRequest {
    return new ListExpensesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExpensesRequest {
    return new ListExpensesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExpensesRequest {
    return new ListExpensesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExpensesRequest | PlainMessage<ListExpensesRequest> | undefined, b: ListExpensesRequest | PlainMessage<ListExpensesRequest> | undefined): boolean {
    return proto3.util.equals(ListExpensesRequest, a, b);
  }
}

/**
 * @generated from message expenses.v1.ListExpensesResponse
 */
export class ListExpensesResponse extends Message<ListExpensesResponse> {
  /**
   * @generated from field: repeated expenses.v1.Expense expenses = 1;
   */
  expenses: Expense[] = [];

  constructor(data?: PartialMessage<ListExpensesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.ListExpensesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expenses", kind: "message", T: Expense, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExpensesResponse {
    return new ListExpensesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExpensesResponse {
    return new ListExpensesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExpensesResponse {
    return new ListExpensesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExpensesResponse | PlainMessage<ListExpensesResponse> | undefined, b: ListExpensesResponse | PlainMessage<ListExpensesResponse> | undefined): boolean {
    return proto3.util.equals(ListExpensesResponse, a, b);
  }
}

/**
 * @generated from message expenses.v1.Expense
 */
export class Expense extends Message<Expense> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: optional uint64 receipt_id = 2;
   */
  receiptId?: bigint;

  /**
   * @generated from field: uint64 amount = 3;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp date = 4;
   */
  date?: Timestamp;

  /**
   * @generated from field: string category = 5;
   */
  category = "";

  /**
   * @generated from field: string subcategory = 6;
   */
  subcategory = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  constructor(data?: PartialMessage<Expense>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "expenses.v1.Expense";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "receipt_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "date", kind: "message", T: Timestamp },
    { no: 5, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "subcategory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Expense {
    return new Expense().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Expense {
    return new Expense().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Expense {
    return new Expense().fromJsonString(jsonString, options);
  }

  static equals(a: Expense | PlainMessage<Expense> | undefined, b: Expense | PlainMessage<Expense> | undefined): boolean {
    return proto3.util.equals(Expense, a, b);
  }
}

