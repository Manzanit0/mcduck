// Code generated by mockery v2.45.0. DO NOT EDIT.

package tgram

import mock "github.com/stretchr/testify/mock"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DownloadFile provides a mock function with given fields: _a0
func (_m *MockClient) DownloadFile(_a0 *File) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*File) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*File) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*File) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type MockClient_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - _a0 *File
func (_e *MockClient_Expecter) DownloadFile(_a0 interface{}) *MockClient_DownloadFile_Call {
	return &MockClient_DownloadFile_Call{Call: _e.mock.On("DownloadFile", _a0)}
}

func (_c *MockClient_DownloadFile_Call) Run(run func(_a0 *File)) *MockClient_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*File))
	})
	return _c
}

func (_c *MockClient_DownloadFile_Call) Return(_a0 []byte, _a1 error) *MockClient_DownloadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DownloadFile_Call) RunAndReturn(run func(*File) ([]byte, error)) *MockClient_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with given fields: _a0
func (_m *MockClient) GetFile(_a0 GetFileRequest) (*File, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 *File
	var r1 error
	if rf, ok := ret.Get(0).(func(GetFileRequest) (*File, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(GetFileRequest) *File); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*File)
		}
	}

	if rf, ok := ret.Get(1).(func(GetFileRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockClient_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - _a0 GetFileRequest
func (_e *MockClient_Expecter) GetFile(_a0 interface{}) *MockClient_GetFile_Call {
	return &MockClient_GetFile_Call{Call: _e.mock.On("GetFile", _a0)}
}

func (_c *MockClient_GetFile_Call) Run(run func(_a0 GetFileRequest)) *MockClient_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(GetFileRequest))
	})
	return _c
}

func (_c *MockClient_GetFile_Call) Return(_a0 *File, _a1 error) *MockClient_GetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFile_Call) RunAndReturn(run func(GetFileRequest) (*File, error)) *MockClient_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: _a0
func (_m *MockClient) SendMessage(_a0 SendMessageRequest) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(SendMessageRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - _a0 SendMessageRequest
func (_e *MockClient_Expecter) SendMessage(_a0 interface{}) *MockClient_SendMessage_Call {
	return &MockClient_SendMessage_Call{Call: _e.mock.On("SendMessage", _a0)}
}

func (_c *MockClient_SendMessage_Call) Run(run func(_a0 SendMessageRequest)) *MockClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(SendMessageRequest))
	})
	return _c
}

func (_c *MockClient_SendMessage_Call) Return(_a0 error) *MockClient_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SendMessage_Call) RunAndReturn(run func(SendMessageRequest) error) *MockClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
