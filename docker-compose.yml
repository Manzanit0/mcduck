services:
  service:
    image: cosmtrek/air
    command: -c .air.service.toml
    working_dir: /app
    ports:
      - 8080:8080
    environment:
      - PGUSER=root
      - PGPASSWORD=password
      - PGDATABASE=mcduck_db
      - PGHOST=postgresql
      - PGPORT=5432
      - PARSER_HOST=http://parser:8080
      - AUTH_HOST=http://localhost:8080 # The service calls itself.
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OTEL_EXPORTER_OTLP_ENDPOINT=jaeger:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=service.name=mcduck,service.version=latest,deployment.environment=local
    volumes:
      - ./:/app
    networks:
      - mcduck
    depends_on:
      - jaeger

  golang:
    container_name: golang-foo
    build:
      context: ./
      dockerfile: dev.Dockerfile
    command: go run ./cmd/api
    ports:
      - 8080:8080
    develop:
      watch:
        - action: sync+restart
          path: ./
          target: /usr/src/app
    environment:
      - PGUSER=root
      - PGPASSWORD=password
      - PGDATABASE=mcduck_db
      - PGHOST=postgresql
      - PGPORT=5432
      - PARSER_HOST=http://parser:8080
      - AUTH_HOST=http://localhost:8080 # The service calls itself.
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OTEL_EXPORTER_OTLP_ENDPOINT=jaeger:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=service.name=mcduck,service.version=latest,deployment.environment=local
    networks:
      - mcduck
    depends_on:
      - jaeger
      - postgresql

  bot:
    image: cosmtrek/air
    command: -c .air.bot.toml
    working_dir: /app
    ports:
      - 8081:8080
    environment:
      - MCDUCK_HOST=http://service:8080
      - MCDUCK_AUTH_TOKEN=fake
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OTEL_EXPORTER_OTLP_ENDPOINT=jaeger:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=service.name=bot,service.version=latest,deployment.environment=local
    volumes:
      - ./:/app
    networks:
      - mcduck
    depends_on:
      - jaeger

  parser:
    image: cosmtrek/air
    command: -c .air.parser.toml
    working_dir: /app
    ports:
      - 8082:8080
    environment:
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=jaeger:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=service.name=parser,service.version=latest,deployment.environment=local
    volumes:
      - ./:/app
    networks:
      - mcduck
    depends_on:
      - jaeger

  postgresql:
    image: postgres:13-alpine
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "postgres",
          "-U",
          "root"
        ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
    ports:
      - "5431:5432"
    volumes:
      - ./scripts/db:/docker-entrypoint-initdb.d/
    networks:
      - mcduck

  flyway:
    image: flyway/flyway
    command: -url=jdbc:postgresql://postgresql:5432/mcduck_db -schemas=public -user=docker -password=123 -connectRetries=60 migrate
    restart: on-failure
    volumes:
      - ./migrations:/flyway/sql
    depends_on:
      - postgresql
    networks:
      - mcduck

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Web UI
      - "4317:4317" # accept OTLP over GRPC
    environment:
      - LOG_LEVEL=debug
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - mcduck

networks:
  mcduck:
    driver: bridge
