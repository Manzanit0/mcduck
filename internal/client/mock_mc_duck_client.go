// Code generated by mockery v2.45.0. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMcDuckClient is an autogenerated mock type for the McDuckClient type
type MockMcDuckClient struct {
	mock.Mock
}

type MockMcDuckClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMcDuckClient) EXPECT() *MockMcDuckClient_Expecter {
	return &MockMcDuckClient_Expecter{mock: &_m.Mock}
}

// CreateReceipt provides a mock function with given fields: ctx, onBehalfOfEmail, data
func (_m *MockMcDuckClient) CreateReceipt(ctx context.Context, onBehalfOfEmail string, data []byte) (*CreateReceiptResponse, error) {
	ret := _m.Called(ctx, onBehalfOfEmail, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceipt")
	}

	var r0 *CreateReceiptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (*CreateReceiptResponse, error)); ok {
		return rf(ctx, onBehalfOfEmail, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *CreateReceiptResponse); ok {
		r0 = rf(ctx, onBehalfOfEmail, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateReceiptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, onBehalfOfEmail, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMcDuckClient_CreateReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReceipt'
type MockMcDuckClient_CreateReceipt_Call struct {
	*mock.Call
}

// CreateReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - onBehalfOfEmail string
//   - data []byte
func (_e *MockMcDuckClient_Expecter) CreateReceipt(ctx interface{}, onBehalfOfEmail interface{}, data interface{}) *MockMcDuckClient_CreateReceipt_Call {
	return &MockMcDuckClient_CreateReceipt_Call{Call: _e.mock.On("CreateReceipt", ctx, onBehalfOfEmail, data)}
}

func (_c *MockMcDuckClient_CreateReceipt_Call) Run(run func(ctx context.Context, onBehalfOfEmail string, data []byte)) *MockMcDuckClient_CreateReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockMcDuckClient_CreateReceipt_Call) Return(_a0 *CreateReceiptResponse, _a1 error) *MockMcDuckClient_CreateReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMcDuckClient_CreateReceipt_Call) RunAndReturn(run func(context.Context, string, []byte) (*CreateReceiptResponse, error)) *MockMcDuckClient_CreateReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUserByChatID provides a mock function with given fields: ctx, onBehalfOfEmail, chatID
func (_m *MockMcDuckClient) SearchUserByChatID(ctx context.Context, onBehalfOfEmail string, chatID int) (*SearchUserResponse, error) {
	ret := _m.Called(ctx, onBehalfOfEmail, chatID)

	if len(ret) == 0 {
		panic("no return value specified for SearchUserByChatID")
	}

	var r0 *SearchUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*SearchUserResponse, error)); ok {
		return rf(ctx, onBehalfOfEmail, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *SearchUserResponse); ok {
		r0 = rf(ctx, onBehalfOfEmail, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, onBehalfOfEmail, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMcDuckClient_SearchUserByChatID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUserByChatID'
type MockMcDuckClient_SearchUserByChatID_Call struct {
	*mock.Call
}

// SearchUserByChatID is a helper method to define mock.On call
//   - ctx context.Context
//   - onBehalfOfEmail string
//   - chatID int
func (_e *MockMcDuckClient_Expecter) SearchUserByChatID(ctx interface{}, onBehalfOfEmail interface{}, chatID interface{}) *MockMcDuckClient_SearchUserByChatID_Call {
	return &MockMcDuckClient_SearchUserByChatID_Call{Call: _e.mock.On("SearchUserByChatID", ctx, onBehalfOfEmail, chatID)}
}

func (_c *MockMcDuckClient_SearchUserByChatID_Call) Run(run func(ctx context.Context, onBehalfOfEmail string, chatID int)) *MockMcDuckClient_SearchUserByChatID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockMcDuckClient_SearchUserByChatID_Call) Return(_a0 *SearchUserResponse, _a1 error) *MockMcDuckClient_SearchUserByChatID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMcDuckClient_SearchUserByChatID_Call) RunAndReturn(run func(context.Context, string, int) (*SearchUserResponse, error)) *MockMcDuckClient_SearchUserByChatID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMcDuckClient creates a new instance of MockMcDuckClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMcDuckClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMcDuckClient {
	mock := &MockMcDuckClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
