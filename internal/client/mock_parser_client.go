// Code generated by mockery v2.45.0. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockParserClient is an autogenerated mock type for the ParserClient type
type MockParserClient struct {
	mock.Mock
}

type MockParserClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParserClient) EXPECT() *MockParserClient_Expecter {
	return &MockParserClient_Expecter{mock: &_m.Mock}
}

// ParseReceipt provides a mock function with given fields: ctx, onBehalfOfEmail, data
func (_m *MockParserClient) ParseReceipt(ctx context.Context, onBehalfOfEmail string, data []byte) (*ParseReceiptResponse, error) {
	ret := _m.Called(ctx, onBehalfOfEmail, data)

	if len(ret) == 0 {
		panic("no return value specified for ParseReceipt")
	}

	var r0 *ParseReceiptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (*ParseReceiptResponse, error)); ok {
		return rf(ctx, onBehalfOfEmail, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *ParseReceiptResponse); ok {
		r0 = rf(ctx, onBehalfOfEmail, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ParseReceiptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, onBehalfOfEmail, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParserClient_ParseReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseReceipt'
type MockParserClient_ParseReceipt_Call struct {
	*mock.Call
}

// ParseReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - onBehalfOfEmail string
//   - data []byte
func (_e *MockParserClient_Expecter) ParseReceipt(ctx interface{}, onBehalfOfEmail interface{}, data interface{}) *MockParserClient_ParseReceipt_Call {
	return &MockParserClient_ParseReceipt_Call{Call: _e.mock.On("ParseReceipt", ctx, onBehalfOfEmail, data)}
}

func (_c *MockParserClient_ParseReceipt_Call) Run(run func(ctx context.Context, onBehalfOfEmail string, data []byte)) *MockParserClient_ParseReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockParserClient_ParseReceipt_Call) Return(_a0 *ParseReceiptResponse, _a1 error) *MockParserClient_ParseReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockParserClient_ParseReceipt_Call) RunAndReturn(run func(context.Context, string, []byte) (*ParseReceiptResponse, error)) *MockParserClient_ParseReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParserClient creates a new instance of MockParserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParserClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParserClient {
	mock := &MockParserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
